{"version":3,"sources":["../../src/lib/load-obj.ts"],"names":["getMeshBoundingBox","parseOBJ","getOBJSchema","loadOBJ","text","options","meshes","vertexCount","reduce","s","mesh","header","attributes","mergeAttributes","boundingBox","schema","mode","loaderData","positions","Float32Array","normals","colors","uvs","i","POSITION","NORMAL","COLOR_0","TEXCOORD_0","set","value","length","size"],"mappings":"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","sourcesContent":["import type {MeshAttributes} from '@loaders.gl/schema';\r\nimport {getMeshBoundingBox} from '@loaders.gl/schema';\r\nimport parseOBJ from './parse-obj';\r\nimport {getOBJSchema} from './get-obj-schema';\r\n\r\nexport default function loadOBJ(text, options) {\r\n  const {meshes} = parseOBJ(text);\r\n\r\n  // @ts-expect-error\r\n  const vertexCount = meshes.reduce((s, mesh) => s + mesh.header.vertexCount, 0);\r\n  // TODO - render objects separately\r\n  const attributes = mergeAttributes(meshes, vertexCount);\r\n\r\n  const header = {\r\n    vertexCount,\r\n    // @ts-ignore Need to export Attributes type\r\n    boundingBox: getMeshBoundingBox(attributes)\r\n  };\r\n\r\n  const schema = getOBJSchema(attributes, {\r\n    mode: 4,\r\n    boundingBox: header.boundingBox\r\n  });\r\n\r\n  return {\r\n    // Data return by this loader implementation\r\n    loaderData: {\r\n      header: {}\r\n    },\r\n\r\n    // Normalised data\r\n    schema,\r\n    header,\r\n    mode: 4, // TRIANGLES\r\n\r\n    attributes\r\n  };\r\n}\r\n\r\n// eslint-disable-next-line max-statements\r\nfunction mergeAttributes(meshes, vertexCount) {\r\n  const positions = new Float32Array(vertexCount * 3);\r\n  let normals;\r\n  let colors;\r\n  let uvs;\r\n  let i = 0;\r\n\r\n  for (const mesh of meshes) {\r\n    const {POSITION, NORMAL, COLOR_0, TEXCOORD_0} = mesh.attributes;\r\n\r\n    positions.set(POSITION.value, i * 3);\r\n\r\n    if (NORMAL) {\r\n      normals = normals || new Float32Array(vertexCount * 3);\r\n      normals.set(NORMAL.value, i * 3);\r\n    }\r\n    if (COLOR_0) {\r\n      colors = colors || new Float32Array(vertexCount * 3);\r\n      colors.set(COLOR_0.value, i * 3);\r\n    }\r\n    if (TEXCOORD_0) {\r\n      uvs = uvs || new Float32Array(vertexCount * 2);\r\n      uvs.set(TEXCOORD_0.value, i * 2);\r\n    }\r\n\r\n    i += POSITION.value.length / 3;\r\n  }\r\n\r\n  const attributes: MeshAttributes = {};\r\n  attributes.POSITION = {value: positions, size: 3};\r\n\r\n  if (normals) {\r\n    attributes.NORMAL = {value: normals, size: 3};\r\n  }\r\n  if (colors) {\r\n    attributes.COLOR_0 = {value: colors, size: 3};\r\n  }\r\n  if (uvs) {\r\n    attributes.TEXCOORD_0 = {value: uvs, size: 2};\r\n  }\r\n\r\n  return attributes;\r\n}\r\n"],"file":"load-obj.js"}