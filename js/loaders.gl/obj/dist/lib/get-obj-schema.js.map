{"version":3,"sources":["../../src/lib/get-obj-schema.ts"],"names":["Schema","Field","FixedSizeList","getArrowTypeFromTypedArray","getOBJSchema","attributes","metadata","metadataMap","key","Map","set","JSON","stringify","fields","attributeName","attribute","field","getArrowFieldFromAttribute","push","type","value","isSingleValue","size"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,KAAhB,EAAuBC,aAAvB,EAAsCC,0BAAtC,QAAuE,oBAAvE;AAEA,OAAO,SAASC,YAAT,CAAsBC,UAAtB,EAAkCC,QAAQ,GAAG,EAA7C,EAAiD;AACtD,MAAIC,WAAJ;;AACA,OAAK,MAAMC,GAAX,IAAkBF,QAAlB,EAA4B;AAC1BC,IAAAA,WAAW,GAAGA,WAAW,IAAI,IAAIE,GAAJ,EAA7B;;AACA,QAAID,GAAG,KAAK,OAAZ,EAAqB;AACnBD,MAAAA,WAAW,CAACG,GAAZ,CAAgBF,GAAhB,EAAqBG,IAAI,CAACC,SAAL,CAAeN,QAAQ,CAACE,GAAD,CAAvB,CAArB;AACD;AACF;;AAED,QAAMK,MAAe,GAAG,EAAxB;;AACA,OAAK,MAAMC,aAAX,IAA4BT,UAA5B,EAAwC;AACtC,UAAMU,SAAS,GAAGV,UAAU,CAACS,aAAD,CAA5B;AACA,UAAME,KAAK,GAAGC,0BAA0B,CAACH,aAAD,EAAgBC,SAAhB,CAAxC;AACAF,IAAAA,MAAM,CAACK,IAAP,CAAYF,KAAZ;AACD;;AACD,SAAO,IAAIhB,MAAJ,CAAWa,MAAX,EAAmBN,WAAnB,CAAP;AACD;;AAED,SAASU,0BAAT,CAAoCH,aAApC,EAAmDC,SAAnD,EAA8D;AAC5D,QAAMR,WAAW,GAAG,IAAIE,GAAJ,EAApB;;AACA,OAAK,MAAMD,GAAX,IAAkBO,SAAlB,EAA6B;AAC3B,QAAIP,GAAG,KAAK,OAAZ,EAAqB;AACnBD,MAAAA,WAAW,CAACG,GAAZ,CAAgBF,GAAhB,EAAqBG,IAAI,CAACC,SAAL,CAAeG,SAAS,CAACP,GAAD,CAAxB,CAArB;AACD;AACF;;AAED,QAAMW,IAAI,GAAGhB,0BAA0B,CAACY,SAAS,CAACK,KAAX,CAAvC;AACA,QAAMC,aAAa,GAAG,EAAE,UAAUN,SAAZ,KAA0BA,SAAS,CAACO,IAAV,KAAmB,CAAnE;AACA,SAAOD,aAAa,GAChB,IAAIpB,KAAJ,CAAUa,aAAV,EAAyBK,IAAzB,EAA+B,KAA/B,EAAsCZ,WAAtC,CADgB,GAEhB,IAAIN,KAAJ,CACAa,aADA,EAEA,IAAIZ,aAAJ,CAAkBa,SAAS,CAACO,IAA5B,EAAkC,IAAIrB,KAAJ,CAAU,OAAV,EAAmBkB,IAAnB,CAAlC,CAFA,EAGA,KAHA,EAIAZ,WAJA,CAFJ;AAQD","sourcesContent":["import {Schema, Field, FixedSizeList, getArrowTypeFromTypedArray} from '@loaders.gl/schema';\r\n\r\nexport function getOBJSchema(attributes, metadata = {}) {\r\n  let metadataMap;\r\n  for (const key in metadata) {\r\n    metadataMap = metadataMap || new Map();\r\n    if (key !== 'value') {\r\n      metadataMap.set(key, JSON.stringify(metadata[key]));\r\n    }\r\n  }\r\n\r\n  const fields: Field[] = [];\r\n  for (const attributeName in attributes) {\r\n    const attribute = attributes[attributeName];\r\n    const field = getArrowFieldFromAttribute(attributeName, attribute);\r\n    fields.push(field);\r\n  }\r\n  return new Schema(fields, metadataMap);\r\n}\r\n\r\nfunction getArrowFieldFromAttribute(attributeName, attribute) {\r\n  const metadataMap = new Map();\r\n  for (const key in attribute) {\r\n    if (key !== 'value') {\r\n      metadataMap.set(key, JSON.stringify(attribute[key]));\r\n    }\r\n  }\r\n\r\n  const type = getArrowTypeFromTypedArray(attribute.value);\r\n  const isSingleValue = !('size' in attribute) || attribute.size === 1;\r\n  return isSingleValue\r\n    ? new Field(attributeName, type, false, metadataMap)\r\n    : new Field(\r\n      attributeName,\r\n      new FixedSizeList(attribute.size, new Field('value', type)),\r\n      false,\r\n      metadataMap\r\n    );\r\n}\r\n"],"file":"get-obj-schema.js"}