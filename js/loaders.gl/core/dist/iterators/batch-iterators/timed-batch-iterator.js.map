{"version":3,"sources":["../../../src/iterators/batch-iterators/timed-batch-iterator.ts"],"names":["timedBatchIterator","batchIterator","timeout","start","Date","now","batches","batch","push"],"mappings":"AAGA,OAAO,gBAAgBA,kBAAhB,CAA0CC,aAA1C,EAA+EC,OAA/E,EAAwF;AAC7F,MAAIC,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAZ;AACA,MAAIC,OAAgB,GAAG,EAAvB;;AACA,aAAW,MAAMC,KAAjB,IAA0BN,aAA1B,EAAyC;AACvCK,IAAAA,OAAO,CAACE,IAAR,CAAaD,KAAb;;AACA,QAAIH,IAAI,CAACC,GAAL,KAAaF,KAAb,GAAqBD,OAAzB,EAAkC;AAChC,YAAMI,OAAN;AACAH,MAAAA,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAR;AACAC,MAAAA,OAAO,GAAG,EAAV;AACD;AACF;;AAED,MAAIA,OAAJ,EAAa;AACX,UAAMA,OAAN;AACD;AACF","sourcesContent":["/**\r\n * \"Debounces\" batches and returns them in groups\r\n */\r\nexport async function* timedBatchIterator<Batch>(batchIterator: AsyncIterable<Batch>, timeout) {\r\n  let start = Date.now();\r\n  let batches: Batch[] = [];\r\n  for await (const batch of batchIterator) {\r\n    batches.push(batch);\r\n    if (Date.now() - start > timeout) {\r\n      yield batches;\r\n      start = Date.now();\r\n      batches = [];\r\n    }\r\n  }\r\n\r\n  if (batches) {\r\n    yield batches;\r\n  }\r\n}\r\n"],"file":"timed-batch-iterator.js"}