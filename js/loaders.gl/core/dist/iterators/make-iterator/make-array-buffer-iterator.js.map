{"version":3,"sources":["../../../src/iterators/make-iterator/make-array-buffer-iterator.ts"],"names":["DEFAULT_CHUNK_SIZE","makeArrayBufferIterator","arrayBuffer","options","chunkSize","byteOffset","byteLength","chunkByteLength","Math","min","chunk","ArrayBuffer","sourceArray","Uint8Array","chunkArray","set"],"mappings":"AAEA,MAAMA,kBAAkB,GAAG,MAAM,IAAjC;AAQA,OAAO,UAAUC,uBAAV,CACLC,WADK,EAELC,OAAwB,GAAG,EAFtB,EAGkB;AACvB,QAAM;AAACC,IAAAA,SAAS,GAAGJ;AAAb,MAAmCG,OAAzC;AAEA,MAAIE,UAAU,GAAG,CAAjB;;AAEA,SAAOA,UAAU,GAAGH,WAAW,CAACI,UAAhC,EAA4C;AAE1C,UAAMC,eAAe,GAAGC,IAAI,CAACC,GAAL,CAASP,WAAW,CAACI,UAAZ,GAAyBD,UAAlC,EAA8CD,SAA9C,CAAxB;AACA,UAAMM,KAAK,GAAG,IAAIC,WAAJ,CAAgBJ,eAAhB,CAAd;AAGA,UAAMK,WAAW,GAAG,IAAIC,UAAJ,CAAeX,WAAf,EAA4BG,UAA5B,EAAwCE,eAAxC,CAApB;AACA,UAAMO,UAAU,GAAG,IAAID,UAAJ,CAAeH,KAAf,CAAnB;AACAI,IAAAA,UAAU,CAACC,GAAX,CAAeH,WAAf;AAGAP,IAAAA,UAAU,IAAIE,eAAd;AACA,UAAMG,KAAN;AACD;AACF","sourcesContent":["import type {IteratorOptions} from './make-iterator';\r\n\r\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\r\n\r\n/**\r\n * Returns an iterator that breaks a big ArrayBuffer into chunks and yields them one-by-one\r\n * @param blob ArrayBuffer to iterate over\r\n * @param options\r\n * @param options.chunkSize\r\n */\r\nexport function* makeArrayBufferIterator(\r\n  arrayBuffer: ArrayBuffer,\r\n  options: IteratorOptions = {}\r\n): Iterable<ArrayBuffer> {\r\n  const {chunkSize = DEFAULT_CHUNK_SIZE} = options;\r\n\r\n  let byteOffset = 0;\r\n\r\n  while (byteOffset < arrayBuffer.byteLength) {\r\n    // Create a chunk of the right size\r\n    const chunkByteLength = Math.min(arrayBuffer.byteLength - byteOffset, chunkSize);\r\n    const chunk = new ArrayBuffer(chunkByteLength);\r\n\r\n    // Copy data from the big chunk\r\n    const sourceArray = new Uint8Array(arrayBuffer, byteOffset, chunkByteLength);\r\n    const chunkArray = new Uint8Array(chunk);\r\n    chunkArray.set(sourceArray);\r\n\r\n    // yield the chunk\r\n    byteOffset += chunkByteLength;\r\n    yield chunk;\r\n  }\r\n}\r\n"],"file":"make-array-buffer-iterator.js"}