{"version":3,"sources":["../../../src/iterators/make-iterator/make-string-iterator.ts"],"names":["DEFAULT_CHUNK_SIZE","makeStringIterator","string","options","chunkSize","offset","textEncoder","TextEncoder","length","chunkLength","Math","min","chunk","slice","encode"],"mappings":"AAEA,MAAMA,kBAAkB,GAAG,MAAM,IAAjC;AAQA,OAAO,UAAUC,kBAAV,CACLC,MADK,EAELC,OAFK,EAGkB;AACvB,QAAMC,SAAS,GAAG,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEC,SAAT,KAAsBJ,kBAAxC;AAEA,MAAIK,MAAM,GAAG,CAAb;AACA,QAAMC,WAAW,GAAG,IAAIC,WAAJ,EAApB;;AACA,SAAOF,MAAM,GAAGH,MAAM,CAACM,MAAvB,EAA+B;AAE7B,UAAMC,WAAW,GAAGC,IAAI,CAACC,GAAL,CAAST,MAAM,CAACM,MAAP,GAAgBH,MAAzB,EAAiCD,SAAjC,CAApB;AACA,UAAMQ,KAAK,GAAGV,MAAM,CAACW,KAAP,CAAaR,MAAb,EAAqBA,MAAM,GAAGI,WAA9B,CAAd;AACAJ,IAAAA,MAAM,IAAII,WAAV;AAGA,UAAMH,WAAW,CAACQ,MAAZ,CAAmBF,KAAnB,CAAN;AACD;AACF","sourcesContent":["import type {IteratorOptions} from './make-iterator';\r\n\r\nconst DEFAULT_CHUNK_SIZE = 256 * 1024;\r\n\r\n/**\r\n * Returns an iterator that breaks a big string into chunks and yields them one-by-one as ArrayBuffers\r\n * @param blob string to iterate over\r\n * @param options\r\n * @param options.chunkSize\r\n */\r\nexport function* makeStringIterator(\r\n  string: string,\r\n  options?: IteratorOptions\r\n): Iterable<ArrayBuffer> {\r\n  const chunkSize = options?.chunkSize || DEFAULT_CHUNK_SIZE;\r\n\r\n  let offset = 0;\r\n  const textEncoder = new TextEncoder();\r\n  while (offset < string.length) {\r\n    // Create a chunk of the right size\r\n    const chunkLength = Math.min(string.length - offset, chunkSize);\r\n    const chunk = string.slice(offset, offset + chunkLength);\r\n    offset += chunkLength;\r\n\r\n    // yield an ArrayBuffer chunk\r\n    yield textEncoder.encode(chunk);\r\n  }\r\n}\r\n"],"file":"make-string-iterator.js"}