{"version":3,"sources":["../../../src/iterators/make-stream/make-dom-stream.ts"],"names":["makeDOMStream","source","options","iterator","Symbol","asyncIterator","ReadableStream","type","pull","controller","done","value","next","close","enqueue","Uint8Array","error","cancel","return","highWaterMark"],"mappings":"AAQA,OAAO,SAASA,aAAT,CACLC,MADK,EAELC,OAFK,EAGW;AAChB,QAAMC,QAAQ,GAAGF,MAAM,CAACG,MAAM,CAACC,aAAR,CAAN,GACbJ,MAAM,CAACG,MAAM,CAACC,aAAR,CAAN,EADa,GAEbJ,MAAM,CAACG,MAAM,CAACD,QAAR,CAAN,EAFJ;AAIA,SAAO,IAAIG,cAAJ,CACL;AAKEC,IAAAA,IAAI,EAAE,OALR;;AAOE,UAAMC,IAAN,CAAWC,UAAX,EAAuB;AACrB,UAAI;AACF,cAAM;AAACC,UAAAA,IAAD;AAAOC,UAAAA;AAAP,YAAgB,MAAMR,QAAQ,CAACS,IAAT,EAA5B;;AACA,YAAIF,IAAJ,EAAU;AACRD,UAAAA,UAAU,CAACI,KAAX;AACD,SAFD,MAEO;AAELJ,UAAAA,UAAU,CAACK,OAAX,CAAmB,IAAIC,UAAJ,CAAeJ,KAAf,CAAnB;AACD;AACF,OARD,CAQE,OAAOK,KAAP,EAAc;AACdP,QAAAA,UAAU,CAACO,KAAX,CAAiBA,KAAjB;AACD;AACF,KAnBH;;AAqBE,UAAMC,MAAN,GAAe;AAAA;;AACb,aAAMd,QAAN,aAAMA,QAAN,2CAAMA,QAAQ,CAAEe,MAAhB,qDAAM,sBAAAf,QAAQ,CAAd;AACD;;AAvBH,GADK,EA2BL;AAEEgB,IAAAA,aAAa,EAAE,KAAK,EAFtB;AAGE,OAAGjB;AAHL,GA3BK,CAAP;AAiCD","sourcesContent":["export type MakeDOMStreamOptions = {\r\n  /** Stream allocates an arrayBuffer. Enables use of a default reader. */\r\n  autoAllocateChunkSize?: number;\r\n  /** Total number of chunks in queue before back pressure is applied */\r\n  highWaterMark?: number;\r\n};\r\n\r\n/** Builds a DOM stream from an iterator */\r\nexport function makeDOMStream<ArrayBuffer>(\r\n  source: Iterable<ArrayBuffer> | AsyncIterable<ArrayBuffer>,\r\n  options?: MakeDOMStreamOptions\r\n): ReadableStream {\r\n  const iterator = source[Symbol.asyncIterator]\r\n    ? source[Symbol.asyncIterator]()\r\n    : source[Symbol.iterator]();\r\n\r\n  return new ReadableStream<Uint8Array>(\r\n    {\r\n      // Create a byte stream (enables `Response(stream).arrayBuffer()`)\r\n      // Only supported on Chrome\r\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController\r\n      // @ts-expect-error Only Chrome supports byte streams\r\n      type: 'bytes',\r\n\r\n      async pull(controller) {\r\n        try {\r\n          const {done, value} = await iterator.next();\r\n          if (done) {\r\n            controller.close();\r\n          } else {\r\n            // TODO - ignores controller.desiredSize\r\n            controller.enqueue(new Uint8Array(value));\r\n          }\r\n        } catch (error) {\r\n          controller.error(error);\r\n        }\r\n      },\r\n\r\n      async cancel() {\r\n        await iterator?.return?.();\r\n      }\r\n    },\r\n    // options: QueingStrategy<Uint8Array>\r\n    {\r\n      // This is bytes, not chunks\r\n      highWaterMark: 2 ** 24,\r\n      ...options\r\n    }\r\n  );\r\n}\r\n"],"file":"make-dom-stream.js"}