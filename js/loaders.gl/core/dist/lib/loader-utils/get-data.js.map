{"version":3,"sources":["../../../src/lib/loader-utils/get-data.ts"],"names":["concatenateArrayBuffersAsync","isResponse","isReadableStream","isAsyncIterable","isIterable","isIterator","isBlob","isBuffer","makeIterator","checkResponse","makeResponse","ERR_DATA","getArrayBufferOrStringFromDataSync","data","loader","options","text","buffer","ArrayBuffer","arrayBuffer","binary","textDecoder","TextDecoder","decode","isView","byteLength","length","byteOffset","slice","Error","getArrayBufferOrStringFromData","isArrayBuffer","response","getAsyncIterableFromData","body","Symbol","asyncIterator","getIterableFromData","getReadableStream","oneChunk","iterator"],"mappings":"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","sourcesContent":["import type {\r\n  DataType,\r\n  SyncDataType,\r\n  BatchableDataType,\r\n  Loader,\r\n  LoaderOptions\r\n} from '@loaders.gl/loader-utils';\r\nimport {concatenateArrayBuffersAsync} from '@loaders.gl/loader-utils';\r\nimport {\r\n  isResponse,\r\n  isReadableStream,\r\n  isAsyncIterable,\r\n  isIterable,\r\n  isIterator,\r\n  isBlob,\r\n  isBuffer\r\n} from '../../javascript-utils/is-type';\r\nimport {makeIterator} from '../../iterators/make-iterator/make-iterator';\r\nimport {checkResponse, makeResponse} from '../utils/response-utils';\r\n\r\nconst ERR_DATA = 'Cannot convert supplied data type';\r\n\r\n// eslint-disable-next-line complexity\r\nexport function getArrayBufferOrStringFromDataSync(\r\n  data: SyncDataType,\r\n  loader: Loader,\r\n  options: LoaderOptions\r\n): ArrayBuffer | string {\r\n  if (loader.text && typeof data === 'string') {\r\n    return data;\r\n  }\r\n\r\n  if (isBuffer(data)) {\r\n    // @ts-ignore\r\n    data = data.buffer;\r\n  }\r\n\r\n  if (data instanceof ArrayBuffer) {\r\n    const arrayBuffer = data;\r\n    if (loader.text && !loader.binary) {\r\n      const textDecoder = new TextDecoder('utf8');\r\n      return textDecoder.decode(arrayBuffer);\r\n    }\r\n    return arrayBuffer;\r\n  }\r\n\r\n  // We may need to handle offsets\r\n  if (ArrayBuffer.isView(data)) {\r\n    // TextDecoder is invoked on typed arrays and will handle offsets\r\n    if (loader.text && !loader.binary) {\r\n      const textDecoder = new TextDecoder('utf8');\r\n      return textDecoder.decode(data);\r\n    }\r\n\r\n    let arrayBuffer = data.buffer;\r\n\r\n    // Since we are returning the underlying arrayBuffer, we must create a new copy\r\n    // if this typed array / Buffer is a partial view into the ArryayBuffer\r\n    // TODO - this is a potentially unnecessary copy\r\n    const byteLength = data.byteLength || data.length;\r\n    if (data.byteOffset !== 0 || byteLength !== arrayBuffer.byteLength) {\r\n      // console.warn(`loaders.gl copying arraybuffer of length ${byteLength}`);\r\n      arrayBuffer = arrayBuffer.slice(data.byteOffset, data.byteOffset + byteLength);\r\n    }\r\n    return arrayBuffer;\r\n  }\r\n\r\n  throw new Error(ERR_DATA);\r\n}\r\n\r\n// Convert async iterator to a promise\r\nexport async function getArrayBufferOrStringFromData(\r\n  data: DataType,\r\n  loader: Loader,\r\n  options: LoaderOptions\r\n): Promise<ArrayBuffer | string> {\r\n  const isArrayBuffer = data instanceof ArrayBuffer || ArrayBuffer.isView(data);\r\n  if (typeof data === 'string' || isArrayBuffer) {\r\n    return getArrayBufferOrStringFromDataSync(data as string | ArrayBuffer, loader, options);\r\n  }\r\n\r\n  // Blobs and files are FileReader compatible\r\n  if (isBlob(data)) {\r\n    data = await makeResponse(data);\r\n  }\r\n\r\n  if (isResponse(data)) {\r\n    const response = data as Response;\r\n    await checkResponse(response);\r\n    return loader.binary ? await response.arrayBuffer() : await response.text();\r\n  }\r\n\r\n  if (isReadableStream(data)) {\r\n    // @ts-expect-error TS2559 options type\r\n    data = makeIterator(data as ReadableStream, options);\r\n  }\r\n\r\n  if (isIterable(data) || isAsyncIterable(data)) {\r\n    // Assume arrayBuffer iterator - attempt to concatenate\r\n    return concatenateArrayBuffersAsync(data as AsyncIterable<ArrayBuffer>);\r\n  }\r\n\r\n  throw new Error(ERR_DATA);\r\n}\r\n\r\nexport async function getAsyncIterableFromData(\r\n  data: BatchableDataType,\r\n  options: LoaderOptions\r\n): Promise<AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>> {\r\n  if (isIterator(data)) {\r\n    return data as AsyncIterable<ArrayBuffer>;\r\n  }\r\n\r\n  if (isResponse(data)) {\r\n    const response = data as Response;\r\n    // Note Since this function is not async, we currently can't load error message, just status\r\n    await checkResponse(response);\r\n    // TODO - bug in polyfill, body can be a Promise under Node.js\r\n    // eslint-disable-next-line @typescript-eslint/await-thenable\r\n    const body = await response.body;\r\n    // TODO - body can be null?\r\n    return makeIterator(body as ReadableStream<Uint8Array>, options as any);\r\n  }\r\n\r\n  if (isBlob(data) || isReadableStream(data)) {\r\n    return makeIterator(data as Blob | ReadableStream, options as any);\r\n  }\r\n\r\n  if (isAsyncIterable(data)) {\r\n    return data[Symbol.asyncIterator]();\r\n  }\r\n\r\n  return getIterableFromData(data);\r\n}\r\n\r\nexport async function getReadableStream(data: BatchableDataType): Promise<ReadableStream> {\r\n  if (isReadableStream(data)) {\r\n    return data as ReadableStream;\r\n  }\r\n  if (isResponse(data)) {\r\n    // @ts-ignore\r\n    return data.body;\r\n  }\r\n  const response = await makeResponse(data);\r\n  // @ts-ignore\r\n  return response.body;\r\n}\r\n\r\n// HELPERS\r\n\r\nfunction getIterableFromData(data) {\r\n  // generate an iterator that emits a single chunk\r\n  if (ArrayBuffer.isView(data)) {\r\n    return (function* oneChunk() {\r\n      yield data.buffer;\r\n    })();\r\n  }\r\n\r\n  if (data instanceof ArrayBuffer) {\r\n    return (function* oneChunk() {\r\n      yield data;\r\n    })();\r\n  }\r\n\r\n  if (isIterator(data)) {\r\n    return data;\r\n  }\r\n\r\n  if (isIterable(data)) {\r\n    return data[Symbol.iterator]();\r\n  }\r\n\r\n  throw new Error(ERR_DATA);\r\n}\r\n"],"file":"get-data.js"}