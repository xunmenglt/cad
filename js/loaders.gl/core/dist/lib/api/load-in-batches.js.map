{"version":3,"sources":["../../../src/lib/api/load-in-batches.ts"],"names":["isLoaderObject","getFetchFunction","parseInBatches","loadInBatches","files","loaders","options","context","Array","isArray","undefined","fetch","loadOneFileInBatches","promises","map","file","url","response"],"mappings":"AACA,SAAQA,cAAR,QAA6B,kCAA7B;AACA,SAAQC,gBAAR,QAA+B,8BAA/B;AAEA,SAAQC,cAAR,QAA6B,oBAA7B;AAyBA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCC,OAAvC,EAAgDC,OAAhD,EAAyD;AAE9D,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAD,IAA2B,CAACL,cAAc,CAACK,OAAD,CAA9C,EAAyD;AACvDE,IAAAA,OAAO,GAAGG,SAAV;AACAJ,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAG,IAAV;AACD;;AAGD,QAAMM,KAAK,GAAGV,gBAAgB,CAACK,OAAO,IAAI,EAAZ,CAA9B;;AAGA,MAAI,CAACE,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAL,EAA2B;AACzB,WAAOQ,oBAAoB,CAACR,KAAD,EAAQC,OAAR,EAAiBC,OAAjB,EAA0BK,KAA1B,CAA3B;AACD;;AAGD,QAAME,QAAQ,GAAGT,KAAK,CAACU,GAAN,CAAWC,IAAD,IAAUH,oBAAoB,CAACG,IAAD,EAAOV,OAAP,EAAgBC,OAAhB,EAAyBK,KAAzB,CAAxC,CAAjB;AAGA,SAAOE,QAAP;AACD;;AAED,eAAeD,oBAAf,CAAoCG,IAApC,EAA0CV,OAA1C,EAAmDC,OAAnD,EAA4DK,KAA5D,EAAmE;AACjE,MAAI,OAAOI,IAAP,KAAgB,QAApB,EAA8B;AAC5B,UAAMC,GAAG,GAAGD,IAAZ;AACA,UAAME,QAAQ,GAAG,MAAMN,KAAK,CAACK,GAAD,CAA5B;AACA,WAAO,MAAMd,cAAc,CAACe,QAAD,EAAWZ,OAAX,EAAoBC,OAApB,CAA3B;AACD;;AACD,SAAO,MAAMJ,cAAc,CAACa,IAAD,EAAOV,OAAP,EAAgBC,OAAhB,CAA3B;AACD","sourcesContent":["import type {LoaderWithParser, LoaderOptions, LoaderContext} from '@loaders.gl/loader-utils';\r\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\r\nimport {getFetchFunction} from '../loader-utils/option-utils';\r\n\r\nimport {parseInBatches} from './parse-in-batches';\r\n\r\ntype FileType = string | File | Blob | Response | (string | File | Blob | Response)[] | FileList;\r\n\r\n/**\r\n * Parses `data` using a specified loader\r\n * @param data\r\n * @param loaders\r\n * @param options\r\n * @param context\r\n */\r\nexport function loadInBatches(\r\n  files: FileType,\r\n  loaders?: LoaderWithParser | LoaderWithParser[] | LoaderOptions,\r\n  options?: LoaderOptions,\r\n  context?: LoaderContext\r\n): Promise<AsyncIterable<any>>;\r\n\r\nexport function loadInBatches(\r\n  files: FileType[] | FileList,\r\n  loaders?: LoaderWithParser | LoaderWithParser[] | LoaderOptions,\r\n  options?: LoaderOptions,\r\n  context?: LoaderContext\r\n): Promise<AsyncIterable<any>>;\r\n\r\nexport function loadInBatches(files, loaders, options, context) {\r\n  // Signature: load(url, options)\r\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\r\n    context = undefined; // context not supported in short signature\r\n    options = loaders;\r\n    loaders = null;\r\n  }\r\n\r\n  // Select fetch function\r\n  const fetch = getFetchFunction(options || {});\r\n\r\n  // Single url/file\r\n  if (!Array.isArray(files)) {\r\n    return loadOneFileInBatches(files, loaders, options, fetch);\r\n  }\r\n\r\n  // Multiple URLs / files\r\n  const promises = files.map((file) => loadOneFileInBatches(file, loaders, options, fetch));\r\n\r\n  // No point in waiting here for all responses before starting to stream individual streams?\r\n  return promises;\r\n}\r\n\r\nasync function loadOneFileInBatches(file, loaders, options, fetch) {\r\n  if (typeof file === 'string') {\r\n    const url = file;\r\n    const response = await fetch(url);\r\n    return await parseInBatches(response, loaders, options);\r\n  }\r\n  return await parseInBatches(file, loaders, options);\r\n}\r\n"],"file":"load-in-batches.js"}