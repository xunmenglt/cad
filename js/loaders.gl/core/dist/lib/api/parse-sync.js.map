{"version":3,"sources":["../../../src/lib/api/parse-sync.ts"],"names":["assert","selectLoaderSync","isLoaderObject","normalizeOptions","getArrayBufferOrStringFromDataSync","getLoaderContext","getLoadersFromContext","getResourceUrlAndType","parseSync","data","loaders","options","context","Array","isArray","undefined","typedLoaders","candidateLoaders","loader","url","parse","Error","parseWithLoaderSync","parseTextSync","ArrayBuffer","name"],"mappings":"AAOA,SAAQA,MAAR,QAAqB,0BAArB;AACA,SAAQC,gBAAR,QAA+B,iBAA/B;AACA,SAAQC,cAAR,QAA6B,kCAA7B;AACA,SAAQC,gBAAR,QAA+B,8BAA/B;AACA,SAAQC,kCAAR,QAAiD,0BAAjD;AACA,SAAQC,gBAAR,EAA0BC,qBAA1B,QAAsD,gCAAtD;AACA,SAAQC,qBAAR,QAAoC,yBAApC;AASA,OAAO,SAASC,SAAT,CACLC,IADK,EAELC,OAFK,EAGLC,OAHK,EAILC,OAJK,EAKA;AACLZ,EAAAA,MAAM,CAAC,CAACY,OAAD,IAAY,OAAOA,OAAP,KAAmB,QAAhC,CAAN;;AAIA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAD,IAA2B,CAACR,cAAc,CAACQ,OAAD,CAA9C,EAAyD;AACvDE,IAAAA,OAAO,GAAGG,SAAV;AACAJ,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAGK,SAAV;AACD;;AAEDJ,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAIA,QAAMK,YAAY,GAAGN,OAArB;AACA,QAAMO,gBAAgB,GAAGX,qBAAqB,CAACU,YAAD,EAAeJ,OAAf,CAA9C;AACA,QAAMM,MAAM,GAAGjB,gBAAgB,CAACQ,IAAD,EAAOQ,gBAAP,EAAyBN,OAAzB,CAA/B;;AAEA,MAAI,CAACO,MAAL,EAAa;AACX,WAAO,IAAP;AACD;;AAGDP,EAAAA,OAAO,GAAGR,gBAAgB,CAACQ,OAAD,EAAUO,MAAV,EAAkBD,gBAAlB,CAA1B;AAGA,QAAM;AAACE,IAAAA;AAAD,MAAQZ,qBAAqB,CAACE,IAAD,CAAnC;;AAEA,QAAMW,KAAK,GAAG,MAAM;AAClB,UAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD,GAFD;;AAGAT,EAAAA,OAAO,GAAGP,gBAAgB,CAAC;AAACc,IAAAA,GAAD;AAAMX,IAAAA,SAAN;AAAiBY,IAAAA,KAAjB;AAAwBV,IAAAA,OAAO,EAAEA;AAAjC,GAAD,EAAwDC,OAAxD,CAA1B;AAEA,SAAOW,mBAAmB,CAACJ,MAAD,EAA6BT,IAA7B,EAAmCE,OAAnC,EAA4CC,OAA5C,CAA1B;AACD;;AAGD,SAASU,mBAAT,CACEJ,MADF,EAEET,IAFF,EAGEE,OAHF,EAIEC,OAJF,EAKE;AACAH,EAAAA,IAAI,GAAGL,kCAAkC,CAACK,IAAD,EAAOS,MAAP,EAAeP,OAAf,CAAzC;;AAEA,MAAIO,MAAM,CAACK,aAAP,IAAwB,OAAOd,IAAP,KAAgB,QAA5C,EAAsD;AACpD,WAAOS,MAAM,CAACK,aAAP,CAAqBd,IAArB,EAA2BE,OAA3B,CAAP;AACD;;AAED,MAAIO,MAAM,CAACV,SAAP,IAAoBC,IAAI,YAAYe,WAAxC,EAAqD;AACnD,WAAON,MAAM,CAACV,SAAP,CAAiBC,IAAjB,EAAuBE,OAAvB,EAAgCC,OAAhC,CAAP;AACD;;AAGD,QAAM,IAAIS,KAAJ,CACH,GAAEH,MAAM,CAACO,IAAK,2EACbb,OAAO,CAACO,GAAR,IAAe,EAChB,EAHG,CAAN;AAKD","sourcesContent":["import type {\r\n  SyncDataType,\r\n  Loader,\r\n  LoaderWithParser,\r\n  LoaderContext,\r\n  LoaderOptions\r\n} from '@loaders.gl/loader-utils';\r\nimport {assert} from '@loaders.gl/loader-utils';\r\nimport {selectLoaderSync} from './select-loader';\r\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\r\nimport {normalizeOptions} from '../loader-utils/option-utils';\r\nimport {getArrayBufferOrStringFromDataSync} from '../loader-utils/get-data';\r\nimport {getLoaderContext, getLoadersFromContext} from '../loader-utils/loader-context';\r\nimport {getResourceUrlAndType} from '../utils/resource-utils';\r\n\r\n/**\r\n * Parses `data` synchronously using a specified loader\r\n * @param data\r\n * @param loaders\r\n * @param options\r\n * @param context\r\n */\r\nexport function parseSync(\r\n  data: SyncDataType,\r\n  loaders?: Loader | Loader[] | LoaderOptions,\r\n  options?: LoaderOptions,\r\n  context?: LoaderContext\r\n): any {\r\n  assert(!context || typeof context === 'object'); // parseSync no longer accepts final url\r\n\r\n  // Signature: parseSync(data, options)\r\n  // Uses registered loaders\r\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\r\n    context = undefined; // context not supported in short signature\r\n    options = loaders as LoaderOptions;\r\n    loaders = undefined;\r\n  }\r\n\r\n  options = options || {};\r\n\r\n  // Chooses a loader (and normalizes it)\r\n  // Also use any loaders in the context, new loaders take priority\r\n  const typedLoaders = loaders as Loader | Loader[] | undefined;\r\n  const candidateLoaders = getLoadersFromContext(typedLoaders, context);\r\n  const loader = selectLoaderSync(data, candidateLoaders, options);\r\n  // Note: if nothrow option was set, it is possible that no loader was found, if so just return null\r\n  if (!loader) {\r\n    return null;\r\n  }\r\n\r\n  // Normalize options\r\n  options = normalizeOptions(options, loader, candidateLoaders);\r\n\r\n  // Extract a url for auto detection\r\n  const {url} = getResourceUrlAndType(data);\r\n\r\n  const parse = () => {\r\n    throw new Error('parseSync called parse');\r\n  };\r\n  context = getLoaderContext({url, parseSync, parse, loaders: loaders as Loader[]}, options);\r\n\r\n  return parseWithLoaderSync(loader as LoaderWithParser, data, options, context);\r\n}\r\n\r\n// TODO - should accept loader.parseSync/parse and generate 1 chunk asyncIterator\r\nfunction parseWithLoaderSync(\r\n  loader: LoaderWithParser,\r\n  data: SyncDataType,\r\n  options: LoaderOptions,\r\n  context: LoaderContext\r\n) {\r\n  data = getArrayBufferOrStringFromDataSync(data, loader, options);\r\n\r\n  if (loader.parseTextSync && typeof data === 'string') {\r\n    return loader.parseTextSync(data, options); // , context, loader);\r\n  }\r\n\r\n  if (loader.parseSync && data instanceof ArrayBuffer) {\r\n    return loader.parseSync(data, options, context); // , loader);\r\n  }\r\n\r\n  // TBD - If synchronous parser not available, return null\r\n  throw new Error(\r\n    `${loader.name} loader: 'parseSync' not supported by this loader, use 'parse' instead. ${\r\n      context.url || ''\r\n    }`\r\n  );\r\n}\r\n"],"file":"parse-sync.js"}