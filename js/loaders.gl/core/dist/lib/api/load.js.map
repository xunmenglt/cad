{"version":3,"sources":["../../../src/lib/api/load.ts"],"names":["isBlob","isLoaderObject","getFetchFunction","parse","load","url","loaders","options","context","Array","isArray","undefined","fetch","data"],"mappings":"AACA,SAAQA,MAAR,QAAqB,gCAArB;AACA,SAAQC,cAAR,QAA6B,kCAA7B;AACA,SAAQC,gBAAR,QAA+B,8BAA/B;AAEA,SAAQC,KAAR,QAAoB,SAApB;AAYA,OAAO,eAAeC,IAAf,CACLC,GADK,EAELC,OAFK,EAGLC,OAHK,EAILC,OAJK,EAKS;AAEd,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcJ,OAAd,CAAD,IAA2B,CAACL,cAAc,CAACK,OAAD,CAA9C,EAAyD;AACvDE,IAAAA,OAAO,GAAGG,SAAV;AACAJ,IAAAA,OAAO,GAAGD,OAAV;AACAA,IAAAA,OAAO,GAAGK,SAAV;AACD;;AAGD,QAAMC,KAAK,GAAGV,gBAAgB,CAACK,OAAD,CAA9B;AAGA,MAAIM,IAAI,GAAGR,GAAX;;AAEA,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3BQ,IAAAA,IAAI,GAAG,MAAMD,KAAK,CAACP,GAAD,CAAlB;AAED;;AAED,MAAIL,MAAM,CAACK,GAAD,CAAV,EAAiB;AAEfQ,IAAAA,IAAI,GAAG,MAAMD,KAAK,CAACP,GAAD,CAAlB;AACD;;AAGD,SAAO,MAAMF,KAAK,CAACU,IAAD,EAAOP,OAAP,EAAgBC,OAAhB,CAAlB;AACD","sourcesContent":["import type {DataType, Loader, LoaderContext, LoaderOptions} from '@loaders.gl/loader-utils';\r\nimport {isBlob} from '../../javascript-utils/is-type';\r\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\r\nimport {getFetchFunction} from '../loader-utils/option-utils';\r\n\r\nimport {parse} from './parse';\r\n\r\n/**\r\n * Parses `data` using a specified loader\r\n * Note: Load does duplicate a lot of parse.\r\n * it can also call fetchFile on string urls, which `parse` won't do.\r\n * @param data\r\n * @param loaders\r\n * @param options\r\n * @param context\r\n */\r\n// implementation signature\r\nexport async function load(\r\n  url: string | DataType,\r\n  loaders?: Loader | Loader[] | LoaderOptions,\r\n  options?: LoaderOptions,\r\n  context?: LoaderContext\r\n): Promise<any> {\r\n  // Signature: load(url, options)\r\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\r\n    context = undefined; // context not supported in short signature\r\n    options = loaders as LoaderOptions;\r\n    loaders = undefined;\r\n  }\r\n\r\n  // Select fetch function\r\n  const fetch = getFetchFunction(options);\r\n\r\n  // at this point, `url` could be already loaded binary data\r\n  let data = url;\r\n  // url is a string, fetch the url\r\n  if (typeof url === 'string') {\r\n    data = await fetch(url);\r\n    // URL is Blob or File, fetchFile handles it (alt: we could generate ObjectURL here)\r\n  }\r\n\r\n  if (isBlob(url)) {\r\n    // The fetch response object will contain blob.name\r\n    data = await fetch(url);\r\n  }\r\n\r\n  // Data is loaded (at least we have a `Response` object) so time to hand over to `parse`\r\n  return await parse(data, loaders, options);\r\n}\r\n"],"file":"load.js"}