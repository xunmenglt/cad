{"version":3,"sources":["../../../src/lib/fetch/fetch-error-message.ts"],"names":["getErrorMessageFromResponseSync","response","url","status","statusText","getErrorMessageFromResponse","message","contentType","headers","get","includes","text","error"],"mappings":"AAAA,OAAO,SAASA,+BAAT,CAAyCC,QAAzC,EAAqE;AAC1E,SAAQ,4BAA2BA,QAAQ,CAACC,GAAI,IAAGD,QAAQ,CAACE,MAAO,MAAKF,QAAQ,CAACG,UAAW,GAA5F;AACD;AAED,OAAO,eAAeC,2BAAf,CAA2CJ,QAA3C,EAAgF;AACrF,MAAIK,OAAO,GAAI,4BAA2BL,QAAQ,CAACC,GAAI,KAAID,QAAQ,CAACE,MAAO,KAA3E;;AACA,MAAI;AACF,UAAMI,WAAW,GAAGN,QAAQ,CAACO,OAAT,CAAiBC,GAAjB,CAAqB,cAArB,KAAwC,EAA5D;;AACA,QAAIF,WAAW,CAACG,QAAZ,CAAqB,kBAArB,CAAJ,EAA8C;AAC5CJ,MAAAA,OAAO,IAAI,MAAML,QAAQ,CAACU,IAAT,EAAjB;AACD,KAFD,MAEO;AACLL,MAAAA,OAAO,IAAIL,QAAQ,CAACG,UAApB;AACD;AACF,GAPD,CAOE,OAAOQ,KAAP,EAAc;AAEd,WAAON,OAAP;AACD;;AACD,SAAOA,OAAP;AACD","sourcesContent":["export function getErrorMessageFromResponseSync(response: Response): string {\r\n  return `Failed to fetch resource ${response.url}(${response.status}): ${response.statusText} `;\r\n}\r\n\r\nexport async function getErrorMessageFromResponse(response: Response): Promise<string> {\r\n  let message = `Failed to fetch resource ${response.url} (${response.status}): `;\r\n  try {\r\n    const contentType = response.headers.get('Content-Type') || '';\r\n    if (contentType.includes('application/json')) {\r\n      message += await response.text();\r\n    } else {\r\n      message += response.statusText;\r\n    }\r\n  } catch (error) {\r\n    // eslint forbids return in finally statement\r\n    return message;\r\n  }\r\n  return message;\r\n}\r\n"],"file":"fetch-error-message.js"}