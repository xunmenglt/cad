{"version":3,"sources":["../../../src/lib/fetch/fetch-file.ts"],"names":["resolvePath","makeResponse","fetchFile","url","options","fetchOptions","fetch"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,0BAA1B;AACA,SAAQC,YAAR,QAA2B,yBAA3B;AAYA,OAAO,eAAeC,SAAf,CACLC,GADK,EAELC,OAFK,EAGc;AACnB,MAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,IAAAA,GAAG,GAAGH,WAAW,CAACG,GAAD,CAAjB;AAEA,QAAIE,YAAyB,GAAGD,OAAhC;;AACA,QAAIA,OAAO,SAAP,IAAAA,OAAO,WAAP,IAAAA,OAAO,CAAEE,KAAT,IAAkB,QAAOF,OAAP,aAAOA,OAAP,uBAAOA,OAAO,CAAEE,KAAhB,MAA0B,UAAhD,EAA4D;AAC1DD,MAAAA,YAAY,GAAGD,OAAO,CAACE,KAAvB;AACD;;AAED,WAAO,MAAMA,KAAK,CAACH,GAAD,EAAME,YAAN,CAAlB;AACD;;AAED,SAAO,MAAMJ,YAAY,CAACE,GAAD,CAAzB;AACD","sourcesContent":["import {resolvePath} from '@loaders.gl/loader-utils';\r\nimport {makeResponse} from '../utils/response-utils';\r\n// import {getErrorMessageFromResponse} from './fetch-error-message';\r\n\r\n/**\r\n * fetch compatible function\r\n * Reads file data from:\r\n * - http/http urls\r\n * - data urls\r\n * - File/Blob objects\r\n * Leverages `@loaders.gl/polyfills` for Node.js support\r\n * Respects pathPrefix and file aliases\r\n */\r\nexport async function fetchFile(\r\n  url: string | Blob,\r\n  options?: RequestInit & {fetch?: RequestInit | Function}\r\n): Promise<Response> {\r\n  if (typeof url === 'string') {\r\n    url = resolvePath(url);\r\n\r\n    let fetchOptions: RequestInit = options as RequestInit;\r\n    if (options?.fetch && typeof options?.fetch !== 'function') {\r\n      fetchOptions = options.fetch;\r\n    }\r\n\r\n    return await fetch(url, fetchOptions);\r\n  }\r\n\r\n  return await makeResponse(url);\r\n}\r\n"],"file":"fetch-file.js"}