{"version":3,"sources":["../../../src/lib/fetch/read-file.ts"],"names":["isBrowser","resolvePath","fs","toArrayBuffer","assert","readFileSync","url","options","buffer","nothrow"],"mappings":"AACA,SAAQA,SAAR,EAAmBC,WAAnB,EAAgCC,EAAhC,EAAoCC,aAApC,QAAwD,0BAAxD;AACA,SAAQC,MAAR,QAAqB,0BAArB;AAQA,OAAO,SAASC,YAAT,CAAsBC,GAAtB,EAAmCC,OAAe,GAAG,EAArD,EAAyD;AAC9DD,EAAAA,GAAG,GAAGL,WAAW,CAACK,GAAD,CAAjB;;AAOA,MAAI,CAACN,SAAL,EAAgB;AACd,UAAMQ,MAAM,GAAGN,EAAE,CAACG,YAAH,CAAgBC,GAAhB,EAAqBC,OAArB,CAAf;AACA,WAAO,OAAOC,MAAP,KAAkB,QAAlB,GAA6BL,aAAa,CAACK,MAAD,CAA1C,GAAqDA,MAA5D;AACD;;AAGD,MAAI,CAACD,OAAO,CAACE,OAAb,EAAsB;AAEpBL,IAAAA,MAAM,CAAC,KAAD,CAAN;AACD;;AAED,SAAO,IAAP;AACD","sourcesContent":["// File read\r\nimport {isBrowser, resolvePath, fs, toArrayBuffer} from '@loaders.gl/loader-utils';\r\nimport {assert} from '@loaders.gl/loader-utils';\r\n\r\n// TODO - this is not tested\r\n// const isDataURL = (url) => url.startsWith('data:');\r\n\r\n/**\r\n * In a few cases (data URIs, node.js) \"files\" can be read synchronously\r\n */\r\nexport function readFileSync(url: string, options: object = {}) {\r\n  url = resolvePath(url);\r\n\r\n  // Only support this if we can also support sync data URL decoding in browser\r\n  // if (isDataURL(url)) {\r\n  //   return decodeDataUri(url);\r\n  // }\r\n\r\n  if (!isBrowser) {\r\n    const buffer = fs.readFileSync(url, options);\r\n    return typeof buffer !== 'string' ? toArrayBuffer(buffer) : buffer;\r\n  }\r\n\r\n  // @ts-ignore\r\n  if (!options.nothrow) {\r\n    // throw new Error('Cant load URI synchronously');\r\n    assert(false);\r\n  }\r\n\r\n  return null;\r\n}\r\n"],"file":"read-file.js"}