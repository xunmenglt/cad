{"version":3,"sources":["../../../src/lib/fetch/read-array-buffer.ts"],"names":["fs","readArrayBuffer","file","start","length","_readToArrayBuffer","Blob","slice","readBlob","blob","Promise","resolve","reject","fileReader","FileReader","onload","event","target","result","onerror","error","readAsArrayBuffer"],"mappings":"AACA,SAAQA,EAAR,QAAiB,0BAAjB;AASA,OAAO,eAAeC,eAAf,CACLC,IADK,EAELC,KAFK,EAGLC,MAHK,EAIiB;AACtB,MAAI,OAAOF,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO,MAAMF,EAAE,CAACK,kBAAH,CAAsBH,IAAtB,EAA4BC,KAA5B,EAAmCC,MAAnC,CAAb;AACD;;AAED,MAAI,EAAEF,IAAI,YAAYI,IAAlB,CAAJ,EAA6B;AAC3BJ,IAAAA,IAAI,GAAG,IAAII,IAAJ,CAAS,CAACJ,IAAD,CAAT,CAAP;AACD;;AACD,QAAMK,KAAK,GAAGL,IAAI,CAACK,KAAL,CAAWJ,KAAX,EAAkBA,KAAK,GAAGC,MAA1B,CAAd;AACA,SAAO,MAAMI,QAAQ,CAACD,KAAD,CAArB;AACD;AASD,OAAO,eAAeC,QAAf,CAAwBC,IAAxB,EAA0D;AAC/D,SAAO,MAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC5C,UAAMC,UAAU,GAAG,IAAIC,UAAJ,EAAnB;;AACAD,IAAAA,UAAU,CAACE,MAAX,GAAqBC,KAAD;AAAA;;AAAA,aAClBL,OAAO,CAACK,KAAD,aAACA,KAAD,wCAACA,KAAK,CAAEC,MAAR,kDAAC,cAAeC,MAAhB,CADW;AAAA,KAApB;;AAGAL,IAAAA,UAAU,CAACM,OAAX,GAAsBC,KAAD,IAAsCR,MAAM,CAACQ,KAAD,CAAjE;;AACAP,IAAAA,UAAU,CAACQ,iBAAX,CAA6BZ,IAA7B;AACD,GAPY,CAAb;AAQD","sourcesContent":["//\r\nimport {fs} from '@loaders.gl/loader-utils';\r\n\r\n/**\r\n * Reads a chunk from a random access file\r\n * @param file\r\n * @param start\r\n * @param length\r\n * @returns\r\n */\r\nexport async function readArrayBuffer(\r\n  file: Blob | ArrayBuffer | string | number,\r\n  start: number,\r\n  length: number\r\n): Promise<ArrayBuffer> {\r\n  if (typeof file === 'number') {\r\n    return await fs._readToArrayBuffer(file, start, length);\r\n  }\r\n  // TODO - we can do better for ArrayBuffer and string\r\n  if (!(file instanceof Blob)) {\r\n    file = new Blob([file]);\r\n  }\r\n  const slice = file.slice(start, start + length);\r\n  return await readBlob(slice);\r\n}\r\n\r\n/**\r\n * Read a slice of a Blob or File, without loading the entire file into memory\r\n * The trick when reading File objects is to read successive \"slices\" of the File\r\n * Per spec https://w3c.github.io/FileAPI/, slicing a File only updates the start and end fields\r\n * Actually reading from file happens in `readAsArrayBuffer`\r\n * @param blob to read\r\n */\r\nexport async function readBlob(blob: Blob): Promise<ArrayBuffer> {\r\n  return await new Promise((resolve, reject) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = (event: ProgressEvent<FileReader>) =>\r\n      resolve(event?.target?.result as ArrayBuffer);\r\n    // TODO - reject with a proper Error\r\n    fileReader.onerror = (error: ProgressEvent<FileReader>) => reject(error);\r\n    fileReader.readAsArrayBuffer(blob);\r\n  });\r\n}\r\n"],"file":"read-array-buffer.js"}